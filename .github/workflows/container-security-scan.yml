name: Container Security Scanning

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  static-scan:
    name: Static Scan with Trivy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          echo "$(pwd)/bin" >> $GITHUB_PATH

      - name: Verify Trivy Installation
        run: trivy --version

      - name: Pull Vulnerable Image
        run: docker pull vulnerables/web-dvwa:latest

      - name: Run Trivy Scan
        run: trivy image vulnerables/web-dvwa:latest > trivy-report.txt

      - name: Upload Trivy Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt

        
  dynamic-scan:
    name: Generate Falco Logs and Upload as Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kubernetes Cluster (using kind)
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          cat <<EOF | kind create cluster --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
              extraMounts:
                - hostPath: /proc
                  containerPath: /host/proc
          EOF

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Install Falco
        run: |
          helm repo add falcosecurity https://falcosecurity.github.io/charts
          helm repo update
          helm install falco falcosecurity/falco --namespace falco --create-namespace \
            --set falco.json_output=true \
            --set falco.ebpf.enabled=true \
            --set falco.log_level=debug

      - name: Create Service Account for Simulate Pod
        run: |
          kubectl create serviceaccount simulate-sa -n falco
          kubectl create clusterrolebinding simulate-sa-binding \
            --clusterrole=cluster-admin \
            --serviceaccount=falco:simulate-sa

      - name: Wait for Falco Pods
        run: |
          echo "Waiting for Falco pods to become ready..."
          kubectl wait --for=condition=ready pod -l app=falco -n falco --timeout=120s || echo "Falco pods not ready"

      - name: Deploy Simulate Pod
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Pod
          metadata:
            name: simulate-pod
            namespace: falco
          spec:
            serviceAccountName: simulate-sa
            containers:
            - name: simulate-container
              image: alpine:latest
              command: ["/bin/sh", "-c"]
              args: ["touch /etc/suspicious-file && cat /etc/shadow || true"]
          EOF

      - name: Wait for Simulate Pod Completion
        run: |
          kubectl wait --for=condition=Ready pod/simulate-pod -n falco --timeout=60s || echo "Simulate pod not ready"

      - name: Clean Up Simulate Pod
        run: |
          kubectl delete pod simulate-pod -n falco --force --grace-period=0 || true

      - name: Collect Falco Logs
        run: |
          echo "Collecting Falco logs..."
          kubectl logs -n falco -l app=falco > falco-logs.txt || echo "No logs found"
        continue-on-error: true

      - name: Upload Falco Logs as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: falco-logs
          path: falco-logs.txt
